package com.malware.application;


import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import java.util.HashMap;
import java.util.Map;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.Queue;
import javax.jms.Session;
import javax.management.MalformedObjectNameException;
import javax.management.ObjectName;
import org.apache.activemq.ActiveMQConnection;
import org.apache.activemq.ActiveMQConnectionFactory;
import org.apache.activemq.broker.BrokerService;
import org.apache.activemq.broker.jmx.BrokerViewMBean;
import org.apache.activemq.broker.jmx.QueueViewMBean;
import org.apache.camel.EndpointInject;
import org.apache.camel.ProducerTemplate;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TestName;
import org.junit.runner.RunWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

/**
 * JUnit test cases to validate message header and content is sent to queue successfully.
 * Using embedded AMQ broker for testing.
 * 
 * @author Nevin Zhu
 * @version 1.0
 * @since 2020-5-22
 *
 */
@RunWith(SpringRunner.class)
@SpringBootTest
public class AMQBrokerServiceTest {

    private static BrokerService brokerService;
    private static String destination;
    private static String connectionUri;
    private static ActiveMQConnection connection;

    @EndpointInject(uri = ROUTE_START)
    private ProducerTemplate producer;

    private static final String ROUTE_START = "direct:send-to-msgbroker";
    
	String inputData = "{"
			+"\"errors\" :[ ],"
			+"\"file_info\" : ["
			    +"{"
			    +"\"new_file_name\":\"20200214170227.021.00000\","
				+"\"original_file_name\":\"virus_2.exe\","
				+"\"path\":\"/mng/20200214\""
				+"}"
			+"]"
	  +"}";
	
    @Rule
    public TestName name = new TestName();

    /*
     * Setting up an embedded message broker instance
     */
    @BeforeClass
    public static void setUp() throws Exception {
    	destination = "queue.pam.nsrl.in";
        brokerService = new BrokerService();

        brokerService.addConnector("tcp://localhost:61617");
        brokerService.setPersistent(false);
        brokerService.getManagementContext().setCreateConnector(false);

        brokerService.start();
        brokerService.waitUntilStarted();
        
        connectionUri = brokerService.getTransportConnectors().get(0).getPublishableConnectString();
        
        connection = createConnection();
    }

    /*
     * During shutdown, there is an exception thrown in the log
     * <Encountered a JMSException - resetting the underlying JMS Connection javax.jms.JMSException: java.io.EOFException.> 
     * This is expected since the log level is shown as INFO.
     */
    @AfterClass
    public static void tearDown() throws Exception {

        brokerService.stop();
        brokerService.waitUntilStopped();
    }
    
	/*
	 * Validating jms producer in camel route is working properly. 
	 * Message count is validated via mbean.
	 */
    @Test
    public void testMessageIsSent() throws Exception {
    	Map<String, Object> headers = new HashMap<String, Object>();
    	headers.put("h_destination", "nsrl");
    	headers.put("h_level", "0");
    	headers.put("h_tid", "20200319180344.001363.022.9876543");
    	headers.put("h_sid", "10200319180344.001363.022.9876543");
    	
    	producer.sendBodyAndHeaders(inputData, headers);
        QueueViewMBean queueView = getProxyToQueue(destination);
        assertEquals(1, queueView.getEnqueueCount());

    }
    
	/*
	 * Validating jms header in camel route is sent correctly. 
	 * Header content is validated by JMS consumer
	 */
    @Test
    public void testConsumerReceived () throws JMSException {
    	
    	connection.start();
    	
    	final Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
        final Queue queue = session.createQueue(destination);
    	
        // Consume the message...
        MessageConsumer consumer = session.createConsumer(queue);
        Message msg = consumer.receive(6000);

        assertNotNull(msg);
        assertEquals("0", msg.getObjectProperty("h_level"));
        session.close();
        connection.stop();
        connection.close();
    }
    
    protected BrokerViewMBean getProxyToBroker() throws MalformedObjectNameException, JMSException {
        ObjectName brokerViewMBean = new ObjectName(
            "org.apache.activemq:type=Broker,brokerName=localhost");
        BrokerViewMBean proxy = (BrokerViewMBean) brokerService.getManagementContext()
                .newProxyInstance(brokerViewMBean, BrokerViewMBean.class, true);
        return proxy;
    }

    protected QueueViewMBean getProxyToQueue(String name) throws MalformedObjectNameException, JMSException {
        ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName="+name);
        QueueViewMBean proxy = (QueueViewMBean) brokerService.getManagementContext()
                .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
        return proxy;
    }
    protected static ActiveMQConnectionFactory createConnectionFactory() throws Exception {
        return new ActiveMQConnectionFactory(connectionUri);
    }

    protected static ActiveMQConnection createConnection() throws Exception {
        return (ActiveMQConnection) createConnectionFactory().createConnection();
    }
}
