package com.malware.application;

import com.malware.application.camel.Iso8601ToMySqlTimestampProcessor;
import org.apache.camel.Exchange;
import org.apache.camel.ExchangePattern;
import org.apache.camel.builder.RouteBuilder;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

/**
 * Camel Route Builder for exposing REST API endpoints and handling data transformation
 * h_ naming convention used to indicate exchange header parameter
 * 
 * @author Nevin Zhu
 * @version 1.0
 * @since 2020-5-7
 *
 */
@Configuration
public class DataServiceAutoConfiguration {

	@Value("${trace.event.queue}")
	private String processEventsQueue;
	
    @Bean
    public RouteBuilder routeBuilder() {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
            	/*
            	 *  REST endpoints definition
            	 */
                rest("/data")
                    .post("/srecord/{h_sid}").to("direct:build-submission-record")
                    .post("/mfile/{h_tid}").to("direct:build-move-file")
                    .post("/hfile").to("direct:build-hash-file")
                    .post("/metadata/{h_tid}").to("direct:build-metadata")
                    .post("/nsrl").to("direct:build-nsrl-lookup")
                    .post("/trecord/{h_sid}/{h_tid}/{h_level}/{h_submission_id}").to("direct:build-transaction-record")
                    .post("/unzip").to("direct:build-unzip")
                    .post("/hashseen").to("direct:build-hashseen")
                    .post("/split/submissionfiles/{h_sid}/{h_submissionId}").to("direct:split-submission-files")
                    .post("/split/unzipfiles/{h_level}/{h_sid}/{h_submissionId}").to("direct:split-unzipped-files")
                    .post("/send/{h_destination}/{h_level}/{h_sid}/{h_tid}").to("direct:send-to-msgbroker")
					.post( "/keymap" ).to("direct:cache-insert-keymap")
					.get( "/keymap/{id}" ).to("direct:cache-load-keymap")
					.delete("/keymap/{id}").to("direct:cache-delete-keymap");

                /*
                 * Process HTTP requests to store keymap to JDG Cache
                 */
                from("direct:cache-delete-keymap").id("cache-delete-keymap")
						.to("bean:id-mapping-cache?method=deleteProcessMapping(${header.id})")
						.choice()
							.when(body().isEqualTo(true))
								.setBody(simple("ok"))
							.otherwise()
								.setBody(simple("not found"))
								.setHeader(Exchange.HTTP_RESPONSE_CODE, constant(404))
						.endChoice();

                from("direct:cache-load-keymap").id("cache-load-keymap")
						.to("bean:id-mapping-cache?method=getMappedValues(${header.id})");


                from("direct:cache-insert-keymap").id("cache-insert-keymap")
						.setHeader("processId", jsonpath("processId"))
						.setHeader("sId", jsonpath("sId"))
						.setHeader("hId", jsonpath("hId"))
						.to("bean:id-mapping-cache?method=publishKeymap(${header.processId}, ${header.hId}, ${header.sId})");

				/*
				 * Process requests from AMQ
				 */

                from("activemq:"+processEventsQueue+"?transacted=true").id("trace-events")
					.log("Received message from queue ${body}")
					.setHeader("processInstanceId", jsonpath("ProcessInstanceId"))
					.setHeader("eventTimestamp", jsonpath("TimeStamp"))
					.setHeader("traceEventType", jsonpath("TraceEventType"))
					.setHeader("eventActionType", jsonpath("EventActionType"))
					.setHeader("processName", jsonpath("Process.Name"))
					.choice()
						.when(jsonpath("Process.Node").isNotNull())
							.setHeader("nodeState", jsonpath("Process.Node.State"))
							.setHeader("nodeName", jsonpath("Process.Node.Name"))
							.setHeader("nodeStartedOn", jsonpath("Process.Node.StartedOn"))
							.setHeader("nodeCompletedOn", jsonpath("Process.Node.CompletedOn"))
						.otherwise()
							.setHeader("nodeState", constant(null))
							.setHeader("nodeName", constant(null))
							.setHeader("nodeStartedOn", constant(null))
							.setHeader("nodeCompletedOn", constant(null))
					.end()
//					.log("value = ${header.eventTimestamp}")
					.process(new Iso8601ToMySqlTimestampProcessor("nodeStartedOn", "nodeCompletedOn", "eventTimestamp"))
					//language=sql
					.setBody(constant("INSERT INTO process_trace_events (process_instance_id, trace_event_type, process_name, node_name"
						+ ", action_event_type, node_state, event_timestamp, node_started_on, node_completed_on) "
						+ "VALUES (:?processInstanceId, :?traceEventType, :?processName, :?nodeName,"
						+ " :?eventActionType, :?nodeState, :?eventTimestamp, :?nodeStartedOn, :?nodeCompletedOn);"))

					.to("jdbc:datasource?useHeadersAsParameters=true");

                /*
                 * Send to message broker. Level attribute is added to the JMS header
                 * h_destination is which queue destination the message will be sent to. Possible values are: 
                 * stage - Send payload directly to the stage queue. This is only used by the split submission record route
                 * dynamic - send payload to the dynamic queue
                 * static - send payload to the static queue
                 * magic - send payload to the magic checker queue
                 * nsrl - send payload to the nsrl queue
                 * 
                 */
                from("direct:send-to-msgbroker").id("send-to-msgbroker")
                .log("...sendin to amq broker. Destination type: ${headers.h_destination} File Level: ${headers.h_level} SID: ${headers.h_sid} SubID: ${headers.h_submissionId} Message Body: ${body}")
                .choice()                			
                  .when(header("h_destination")
                		  .isEqualTo("stage"))
                  			.log("..stage queue for splitted submission files selected")
                  			.setExchangePattern(ExchangePattern.InOnly)
                  			.toD("activemq:{{file.stage.queue}}")
                  			.id("stage-queue-destination")
                  			
                  .when(header("h_destination")
                		  .isEqualTo("dynamic"))
                  			.log("..dynamic queue selected")
                  			.to("direct:build-dynamic-analysis-engine")
                  			.setExchangePattern(ExchangePattern.InOnly)
                  			.toD("activemq:{{dynamic.analysis.queue}}")
                  			.id("dynamic-analysis-queue-destination")
                  			
                  .when(header("h_destination")
                		  .isEqualTo("static"))
                  			.log("..static queue selected")
                  			.to("direct:build-static-analysis-engine")
                  			.setExchangePattern(ExchangePattern.InOnly)
                  			.toD("activemq:{{static.analysis.queue}}")
                  			.id("static-analysis-queue-destination")
                  			
                  .when(header("h_destination")
                		  .isEqualTo("magic"))
                  			.log("..magic queue selected")
                  			.to("direct:build-magic-analysis")
                  			.setExchangePattern(ExchangePattern.InOnly)
                  			.toD("activemq:{{magic.analysis.queue}}")
                  			.id("magic-analysis-queue-destination")
                  			
                  .when(header("h_destination")
                		  .isEqualTo("nsrl"))
                  			.log("..nsrl queue selected")
                  			.to("direct:build-nsrl-queue-request")
                  			.setExchangePattern(ExchangePattern.InOnly)
                  			.toD("activemq:{{nsrl.analysis.queue}}")
                  			.id("nsrl-analysis-queue-destination");

                /*
                 * Inbound Data Description: A collection of unzip files from zip microservice
                 * Inbound Data Type: JSON
                 * Accept-Content: text/plain
                 * Method: HTTP-POST
                 * Outbound Data Description: Decomposed unzip files. Sent to the staging message queue
                 */
                from("direct:split-unzipped-files").id("split-unzipped-files")
                .log("Split unzip route triggered. Body is ${body}")
/*                .setHeader("h_fname").jsonpath("submission_data.first_name")
                .setHeader("h_lname").jsonpath("submission_data.last_name")
                .setHeader("h_pnumber").jsonpath("submission_data.phone_number")
                .setHeader("h_org").jsonpath("submission_data.organization")
                .setHeader("h_email").jsonpath("submission_data.email")
                .setHeader("h_ip").jsonpath("submission_data.ip")*/
                .split().jsonpath("file_info[*]").aggregationStrategy(new SubmissionFileAggregateStrategy())
                .log("--> After Split, body is ${body}")
                .setHeader("h_filepath").jsonpath("path")
                .setHeader("h_filename").jsonpath("file_name")
                .to("freemarker:templates/split_unzip_files.ftl")
                .setHeader("h_destination").simple("stage")
                .to("direct:send-to-msgbroker");
                
                /*
                 * Inbound Data Description: A collection of submission files from submission queue
                 * Inbound Data Type: JSON
                 * Accept-Content: text/plain
                 * Method: HTTP-POST
                 * Outbound Data Description: Decomposed submission files. Single file path is returned.
                 */
                from("direct:split-submission-files").id("split-submission-files")
                    .log("Split submission route triggered. Body is ${body}")
/*                    .setHeader("h_fname").jsonpath("submission_data.first_name")
                    .setHeader("h_lname").jsonpath("submission_data.last_name")
                    .setHeader("h_pnumber").jsonpath("submission_data.phone_number")
                    .setHeader("h_org").jsonpath("submission_data.organization")
                    .setHeader("h_email").jsonpath("submission_data.email")
                    .setHeader("h_ip").jsonpath("submission_data.ip")*/
                    .split().jsonpath("file_paths[*]").aggregationStrategy(new SubmissionFileAggregateStrategy())
                    .to("freemarker:templates/split_submission_files.ftl")
                    .choice()
                       .when(header("CamelSplitIndex").isGreaterThan(0)).setHeader("h_level").simple("0").setHeader("h_destination").simple("stage").to("direct:send-to-msgbroker");
                
                /*
                 * Inbound Data Description: Raw data from submission queue
                 * Inbound Data Type: JSON
                 * Accept-Content: text/plain
                 * Method: HTTP-POST
                 * Outbound Data Description: JSON request payload for invoking submission record microservice
                 */
                from("direct:build-submission-record").id("build-submission-record")
                    .log("${body}")
                    .setHeader("h_fname").jsonpath("submission_data.first_name")
                    .setHeader("h_lname").jsonpath("submission_data.last_name")
                    .setHeader("h_pnumber").jsonpath("submission_data.phone_number")
                    .setHeader("h_org").jsonpath("submission_data.organization")
                    .setHeader("h_email").jsonpath("submission_data.email")
                    .setHeader("h_ip").jsonpath("submission_data.ip")
                    .setHeader("h_submission_type_cd").jsonpath("submission_data.submission_type_cd")
                    .setHeader("h_description").jsonpath("submission_data.description")
                    .setHeader("h_traffic_light_protocol_cd").jsonpath("submission_data.traffic_light_protocol_cd")
                    .setHeader("h_incident_id").jsonpath("submission_data.incident_id")
                    .setHeader("h_disclaimer_ind").jsonpath("submission_data.disclaimer_ind")
                    .to("freemarker:templates/submission_record_req.ftl")
                    .log("...response built for submission record request: ${body}");
                
                /*
                 * Inbound Data Description: Raw data from submission queue
                 * Inbound Data Type: JSON
                 * Accept-Content: text/plain
                 * Method: HTTP-POST
                 * Outbound Data Description: JSON request payload for invoking file mover microservice
                 */
                from("direct:build-move-file").id("build-move-file")
                .log("..Received payload from REST API: ${body}")
                .setHeader("h_filepath").jsonpath("file_paths[0]")
                .to("freemarker:templates/move_file_req.ftl")
                .log(".. response built for move file request: ${body}");
                
                /*
                 * Inbound Data Description: JSON response data from file mover microservice
                 * Inbound Data Type: JSON
                 * Accept-Content: text/plain
                 * Method: HTTP-POST
                 * Outbound Data Description: JSON request payload for invoking create hash microservice
                 */
                from("direct:build-hash-file").id("build-hash-file")
                .log("..Received payload from REST API: ${body}")
                .setHeader("h_filepath").jsonpath("file_info[0].path")
                .setHeader("h_filename").jsonpath("file_info[0].new_file_name")
                .to("freemarker:templates/hash_file_req.ftl")
                .log(".. response built for hash file request: ${body}");
                
                /*
                 * Inbound Data Description: JSON response data from create hash microservice
                 * Inbound Data Type: JSON
                 * Accept-Content: text/plain
                 * Method: HTTP-POST
                 * Outbound Data Description: JSON request payload for invoking metadata microservice
                 */
                from("direct:build-metadata").id("build-metadata")
                .log("..Received payload from REST API: ${body}")
                .setHeader("h_md5").jsonpath("results[0].md5")
                .setHeader("h_sha1").jsonpath("results[0].sha1")
                .setHeader("h_sha256").jsonpath("results[0].sha256")
                .setHeader("h_sha512").jsonpath("results[0].sha512")
                .setHeader("h_ssdeep").jsonpath("results[0].ssdeep")
                .to("freemarker:templates/create_metadata_req.ftl")
                .log(".. response built for create metadata request: ${body}");
                
                /*
                 * Inbound Data Description: JSON response data from create hash microservice
                 * Inbound Data Type: JSON
                 * Accept-Content: text/plain
                 * Method: HTTP-POST
                 * Outbound Data Description: JSON request payload for invoking nsrl lookup microservice
                 */
                from("direct:build-nsrl-lookup").id("build-nsrl-lookup")
                .log("..Received payload from REST API: ${body}")
                .setHeader("h_sha1").jsonpath("results[0].sha1")
                .to("freemarker:templates/nsrl_req.ftl")
                .log(".. response built for nsrl request: ${body}");

                /*
                 * Inbound Data Description: Concatenated JSON data from joining submission record response data and file mover response data
                 * Inbound Data Type: JSON
                 * Accept-Content: text/plain
                 * Method: HTTP-POST
                 * Outbound Data Description: JSON request payload for invoking transaction record microservice
                 */
                from("direct:build-transaction-record").id("build-transaction-record")
                .log("..Received payload from REST API: ${body}")
                .setHeader("h_filepath").jsonpath("file_info[0].path")
                .setHeader("h_filename").jsonpath("file_info[0].new_file_name")
                .to("freemarker:templates/transaction_record_req.ftl")
                .log(".. response built for transaction record request: ${body}");
                
                /*
                 * Inbound Data Description: JSON response data from file mover microservice
                 * Inbound Data Type: JSON
                 * Accept-Content: text/plain
                 * Method: HTTP-POST
                 * Outbound Data Description: JSON request payload for invoking unzip microservice
                 */
                from("direct:build-unzip").id("build-unzip")
                .log("..Received payload from REST API: ${body}")
                .setHeader("h_filepath").jsonpath("file_info[0].path")
                .setHeader("h_filename").jsonpath("file_info[0].new_file_name")
                .to("freemarker:templates/unzip_req.ftl")
                .log(".. response built for unzip request: ${body}");
                
                /*
                 * Inbound Data Description: JSON response data from create hash microservice
                 * Inbound Data Type: JSON
                 * Accept-Content: text/plain
                 * Method: HTTP-POST
                 * Outbound Data Description: JSON request payload for invoking hash seen microservice
                 */
                from("direct:build-hashseen").id("build-hashseen")
                .log("..Received payload from REST API: ${body}")
                .setHeader("h_sha256").jsonpath("results[0].sha256")
                .setBody().simple("${header.h_sha256}")
                .log(".. response built for hash seen request: ${body}");

                /*
                 * Inbound Data Description: JSON response data from file mover microservice
                 * Inbound Data Type: JSON
                 * Accept-Content: text/plain
                 * Method: HTTP-POST
                 * Outbound Data Description: JSON request payload for invoking magic analysis engine (message queue)
                 */
                from("direct:build-magic-analysis").id("build-magic-analysis")
                .log("..Received payload from REST API: ${body}")
                .setHeader("h_filepath").jsonpath("file_info[0].path")
                .setHeader("h_filename").jsonpath("file_info[0].new_file_name")
                .to("freemarker:templates/magic_checker_req.ftl")
                .log(".. response built for magic check request: ${body}");
                
                /*
                 * Inbound Data Description: JSON response data from file mover microservice
                 * Inbound Data Type: JSON
                 * Accept-Content: text/plain
                 * Method: HTTP-POST
                 * Outbound Data Description: JSON request payload for invoking static analysis engine (message queue)
                 */
                from("direct:build-static-analysis-engine").id("build-static-analysis-engine")
                .log("..Received payload from REST API: ${body}")
                .setHeader("h_filepath").jsonpath("file_info[0].path")
                .setHeader("h_filename").jsonpath("file_info[0].new_file_name")
                .to("freemarker:templates/static-analysis_engine_req.ftl")
                .log(".. response built for analysis engine request: ${body}");
                
                /*
                 * Inbound Data Description: JSON response data from file mover microservice
                 * Inbound Data Type: JSON
                 * Accept-Content: text/plain
                 * Method: HTTP-POST
                 * Outbound Data Description: JSON request payload for invoking dynamic analysis engine (message queue)
                 */
                from("direct:build-dynamic-analysis-engine").id("build-dynamic-analysis-engine")
                .log("..Received payload from REST API: ${body}")
                .setHeader("h_filepath").jsonpath("file_info[0].path")
                .setHeader("h_filename").jsonpath("file_info[0].new_file_name")
                .to("freemarker:templates/dynamic-analysis_engine_req.ftl")
                .log(".. response built for analysis engine request: ${body}");
                
                /*
                 * Inbound Data Description: JSON response data from file mover microservice
                 * Inbound Data Type: JSON
                 * Accept-Content: text/plain
                 * Method: HTTP-POST
                 * Outbound Data Description: JSON request payload for nsrl queue (message queue)
                 */
                from("direct:build-nsrl-queue-request").id("build-nsrl-queue-request")
                .log("..Received payload from REST API: ${body}")
                .setHeader("h_filepath").jsonpath("file_info[0].path")
                .setHeader("h_filename").jsonpath("file_info[0].new_file_name")
                .to("freemarker:templates/nsrl_queue_request.ftl")
                .log(".. response built for nsrl queue request: ${body}");
            }
        };
    }
}