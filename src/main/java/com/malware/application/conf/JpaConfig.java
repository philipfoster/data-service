package com.malware.application.conf;


import com.mysql.cj.jdbc.MysqlConnectionPoolDataSource;
import javax.sql.DataSource;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.orm.jpa.LocalEntityManagerFactoryBean;
import org.springframework.transaction.annotation.EnableTransactionManagement;

@Configuration
@EnableTransactionManagement
public class JpaConfig {

    private static final Logger logger = LoggerFactory.getLogger(JpaConfig.class);

    @Value("${traceDb.url}")
    private String traceDbUrl;
    @Value("${traceDb.username}")
    private String traceDbUsername;
    @Value("${traceDb.password}")
    private String traceDbPassword;

    @Bean("datasource")
    public DataSource dataSource() {
        MysqlConnectionPoolDataSource ds = new MysqlConnectionPoolDataSource() ;
        ds.setUrl(traceDbUrl);
        ds.setUser(traceDbUsername);
        ds.setPassword(traceDbPassword);
        return ds;
    }

    @Bean
    public LocalEntityManagerFactoryBean geEntityManagerFactoryBean() {
        LocalEntityManagerFactoryBean factoryBean = new LocalEntityManagerFactoryBean();
        factoryBean.setPersistenceUnitName("postgres");
        return factoryBean;
    }

    @Bean
    public JpaTransactionManager geJpaTransactionManager() {
        JpaTransactionManager transactionManager = new JpaTransactionManager();
        transactionManager.setEntityManagerFactory(geEntityManagerFactoryBean().getObject());
        return transactionManager;
    }

//    @Bean
//    public LocalContainerEntityManagerFactoryBean factoryBean() {
//        LocalContainerEntityManagerFactoryBean factory =
//                new LocalContainerEntityManagerFactoryBean();
//        factory.setDataSource(pgDataSource());
//        factory.setPersistenceProviderClass(HibernatePersistenceProvider.class);
////        comment the following line if you want to use default META-INF/persistence.xml
////        factory.setPersistenceXmlLocation("jpa/my-persistence.xml");
////        Properties properties = new Properties();
////        properties.setProperty("javax.persistence.schema-generation.database.action", "create");
////        factory.setJpaProperties(properties);
//
//        logger.info("ds = {}", factory.toString() );
//
//        return factory;
//    }

}
