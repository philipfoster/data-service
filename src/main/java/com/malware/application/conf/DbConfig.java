package com.malware.application.conf;


import org.springframework.context.annotation.Configuration;
import org.springframework.transaction.annotation.EnableTransactionManagement;

/**
 * This class provides configuration for the MySQL database connection. Fields are configured through the spring configuration properties
 *
 * Config fields:
 *  - {@code traceDb.url} = The JDBC Connection string
 *  - {@code traceDb.username} = The username to use to connect
 *  - {@code traceDb.password} = the password to use to connect
 */
@Configuration
@EnableTransactionManagement
public class DbConfig {

//    private static final Logger logger = LoggerFactory.getLogger(DbConfig.class);
//
//    @Value("${traceDb.url}")
//    private String traceDbUrl;
//    @Value("${traceDb.username}")
//    private String traceDbUsername;
//    @Value("${traceDb.password}")
//    private String traceDbPassword;
//
////    @Value("${jpaconfig}")
////    private String persistenceXmlPath;
//
//    @Bean("datasource")
//    public DataSource dataSource() {
//        MysqlConnectionPoolDataSource ds = new MysqlConnectionPoolDataSource() ;
//        ds.setUrl(traceDbUrl);
//        ds.setUser(traceDbUsername);
//        ds.setPassword(traceDbPassword);
//        return ds;
//    }
//
//
//    @Bean
//    public LocalEntityManagerFactoryBean geEntityManagerFactoryBean() {
//        LocalEntityManagerFactoryBean factoryBean = new LocalEntityManagerFactoryBean();
//        factoryBean.setPersistenceUnitName("postgres");
//        return factoryBean;
//    }
//
//    @Bean
//    public JpaTransactionManager geJpaTransactionManager(LocalEntityManagerFactoryBean factoryBean) {
//        JpaTransactionManager transactionManager = new JpaTransactionManager();
//        transactionManager.setEntityManagerFactory(factoryBean.getObject());
//        return transactionManager;
//    }

}
