package com.malware.application.conf;


import com.mysql.cj.jdbc.MysqlConnectionPoolDataSource;
import javax.sql.DataSource;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.orm.jpa.LocalEntityManagerFactoryBean;
import org.springframework.transaction.annotation.EnableTransactionManagement;

/**
 * This class provides configuration for the MySQL database connection. Fields are configured through the spring configuration properties
 *
 * Config fields:
 *  - {@code traceDb.url} = The JDBC Connection string
 *  - {@code traceDb.username} = The username to use to connect
 *  - {@code traceDb.password} = the password to use to connect
 */
@Configuration
@EnableTransactionManagement
public class DbConfig {

    private static final Logger logger = LoggerFactory.getLogger(DbConfig.class);

    @Value("${traceDb.url}")
    private String traceDbUrl;
    @Value("${traceDb.username}")
    private String traceDbUsername;
    @Value("${traceDb.password}")
    private String traceDbPassword;

//    @Value("${jpaconfig}")
//    private String persistenceXmlPath;

    @Bean("datasource")
    public DataSource dataSource() {
        MysqlConnectionPoolDataSource ds = new MysqlConnectionPoolDataSource() ;
        ds.setUrl(traceDbUrl);
        ds.setUser(traceDbUsername);
        ds.setPassword(traceDbPassword);
        return ds;
    }


    @Bean
    public LocalEntityManagerFactoryBean geEntityManagerFactoryBean() {
        LocalEntityManagerFactoryBean factoryBean = new LocalEntityManagerFactoryBean();
        factoryBean.setPersistenceUnitName("postgres");
        return factoryBean;
    }

    @Bean
    public JpaTransactionManager geJpaTransactionManager(LocalEntityManagerFactoryBean factoryBean) {
        JpaTransactionManager transactionManager = new JpaTransactionManager();
        transactionManager.setEntityManagerFactory(factoryBean.getObject());
        return transactionManager;
    }

}
