package com.malware.application.conf;


import org.infinispan.configuration.cache.CacheMode;
import org.infinispan.configuration.cache.ConfigurationBuilder;
import org.infinispan.configuration.cache.PersistenceConfigurationBuilder;
import org.infinispan.eviction.EvictionType;
import org.infinispan.spring.starter.embedded.InfinispanCacheConfigurer;
import org.infinispan.spring.starter.embedded.InfinispanConfigurationCustomizer;
import org.infinispan.spring.starter.embedded.InfinispanGlobalConfigurationCustomizer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
@EnableCaching
public class InfinispanConfig {

    private static final Logger logger = LoggerFactory.getLogger(InfinispanConfig.class);
//    private final DataSource ds;
//    @PersistenceContext
//    private EntityManager em;

    @Value("${clustering.jgroups-channel-name}")
    private String clusterName;

    @Bean
    public InfinispanGlobalConfigurationCustomizer globalCustomizer() {
        return builder -> builder.transport().defaultTransport().clusterName(clusterName);
    }

    @Bean
    public InfinispanConfigurationCustomizer configurationCustomizer() {
        return builder -> {
            builder
                .memory()
                .evictionType(EvictionType.COUNT);
        } ;
    }


    @Bean
    public InfinispanCacheConfigurer cacheConfigurer() {

        return manager -> {
            final PersistenceConfigurationBuilder ispnConfig = new ConfigurationBuilder()
                .clustering()
                .cacheMode(CacheMode.DIST_ASYNC)
                .persistence();

//            JpaStoreConfigurationBuilder storeConfig = new JpaStoreConfigurationBuilder(ispnConfig)
//                .entityClass(ProcessIdMapping.class)
//                .persistenceUnitName("postgres")
//                .shared(true)
//                .preload(true);

//            ispnConfig.addStore(storeConfig);
            manager.createCache("processIdCache", ispnConfig.build());
        };
    }
}